package peer.afang.facerecognition;

import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
import org.opencv.core.*;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

import java.util.Base64;

/**
 * @author ZhangZhenfang
 * @date 2019/4/11 14:51
 */
public class FreeTypeTest {
    static {
        System.load("D:/openCV/opencv/build/java/x64/opencv_java341.dll/");
    }
    public static void main(String[] args) {
        String str = "Qk0WDAAAAAAAADYAAAAoAAAAMgAAABQAAAABABgAAAAAAOALAADEDgAAxwwAA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAP/////////k//9o///////////////D//9P//9P//9P//9P//9+///////////C//9K//88//+X//////////////////////////9a///6///////+//+E//8x//87//+t/////////////////////////////////////////////////////////////////////wAA/////////9f//yP//////////////+z//xz//3X//8f//8f//9b//////93//xH//6r//8X//yj//53//////////////////////w////f//////5D//0P//9H//7f//xf//7n/////////////////////////////////////////////////////////////////AAD/////////1///I///////////////////1f//Hf//zP//////////////yP//n///////////nP//Tf//////Wv//O///O///O///A///Ov//zv//mf//1v//////////jv//Wf////////////////////////////////////////////////////////////////8AAP/////////X//8j//////////////////////+///8g///q//////////////////////////91//9i//////9w//9q///n///n//8O///g///5//////////////////+n//9I/////////////////////////////////////////////////////////////////wAA/////////9f//yP//////////////////////////4X//0v//////////////////8j//0f//zD//+X///////f//yz//8X//////w////f//////7///6P///////z//03//4T/////////////////////////////////////////////////////////////////AAD/////////1///I////////////////////////////P//Kf//u///////////////6P//lv//Kv//3v//////////zP//Jv//8v//D///9///////sP//C///I///Gv//Sv//8/////////////////////////////////////////////////////////////////8AAP////9w//++//8j///////////////e///a//////////9///9u///////r///P//////////9+//93//////////////+B//9e//8P///3///////o//8j///0///x/////////////////////////////////////////////////////////////////////////wAA/////7X//x3//yP//////////////7r//yj//+T///z//03//33//////+T//x///+X///7//1P//33///////////////v//zb//wH///f//////////yD//+L///f///f///z/////////////////////////////////////////////////////////////////AAD/////////wv//Kv//////////////////hf//DP//Ef//PP//7P//////////q///If//Gv//Pf//6v//////////////////2f//Cv//9///////////Zv//G///G///G///nP////////////////////////////////////////////////////////////////8AAP/////////////4///////////////////////5///u///////////////////////+///5///////////////////////////////2/////////////////////////////////////////////////////////////////////////////////////////////////wAA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAA==";
        String path = "E:\\vscodeworkspace\\FaceRecognition\\FaceRecognitionApi\\src\\main\\resources\\imgs\\31_1.png";
        byte[] decode = Base64.getDecoder().decode(str);
        Mat imread = Imgcodecs.imread(path);

//        Mat roi = imread.adjustROI(20, 40, 20, 70);
//        System.out.println(imread);
//        System.out.println(roi);
//        Imgcodecs.imwrite("C:\\Users\\fang\\Desktop\\b.jpg", roi);
//        Scalar scalar = new Scalar(1);
//        Mat mask = new Mat(roi.size(), roi.depth());
        Mat mat = Imgcodecs.imdecode(new MatOfByte(decode), Imgcodecs.CV_LOAD_IMAGE_UNCHANGED);
        mat.convertTo(mat, imread.type());
        System.out.println(mat);
        System.out.println(imread);
        mat.setTo(imread);
//        for (int i = 0; i < mat.height(); i++) {
//            for (int j = 0; j < mat.width(); j++) {
//                imread.put(i, j, mat.get(i, j));
//            }
//        }
        Imgcodecs.imwrite("C:\\Users\\fang\\Desktop\\a.jpg", imread);
//        System.out.println(mat.dump());
//        imread.copyTo(mat);
//        System.out.println(imread);
//        System.out.println(mat.dump());
//        Imgcodecs.imwrite("C:\\Users\\fang\\Desktop\\a.jpg", imread);
//        Imgcodecs.imwrite("C:\\Users\\fang\\Desktop\\b.jpg", mat);


    }
}
